---
import Spiner from './spiner.astro';
---

<ocr-component>
  <div class="upload-section">
    <div class="container-input">
      <input type="file" name="file-1" id="imageUploader" class="inputfile inputfile-1" accept="image/*" />
      <label for="imageUploader">
      <svg xmlns="http://www.w3.org/2000/svg" class="iborrainputfile" width="20" height="17" viewBox="0 0 20 17"><path d="M10 0l-5.2 4.9h3.3v5.1h3.8v-5.1h3.3l-5.2-4.9zm9.3 11.5l-3.2-2.1h-2l3.4 2.6h-3.5c-.1 0-.2.1-.2.1l-.8 2.3h-6l-.8-2.2c-.1-.1-.1-.2-.2-.2h-3.6l3.4-2.6h-2l-3.2 2.1c-.4.3-.7 1-.6 1.5l.6 3.1c.1.5.7.9 1.2.9h16.3c.6 0 1.1-.4 1.3-.9l.6-3.1c.1-.5-.2-1.2-.7-1.5z"></path></svg>
      <span class="iborrainputfile">Select your image ðŸ˜‰</span>
      </label>
    </div>
    <p id="status">Upload an image to extract text.</p>
    <Spiner />
  </div>
  <div class="output-section">
    <h2>Extracted Text:</h2>
    <output contenteditable="true" id="extractedText" class="text-output"></output>
  </div>
</ocr-component>

<script>
import { createWorker } from 'tesseract.js';

class OCRComponent extends HTMLElement {
  constructor() {
    super();
    const inputUploader = this.querySelector(
      '#imageUploader'
    ) as HTMLInputElement;
    const extractedText = this.querySelector(
      '#extractedText'
    ) as HTMLOutputElement;
    const statusElement = this.querySelector('#status') as HTMLParagraphElement;
    const loaderSpinner = this.querySelector('.loader') as HTMLDivElement;

    inputUploader?.addEventListener('change', function (event: Event) {
      const target = event.target as HTMLInputElement;
      const file = target.files ? target.files[0] : null;
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e: ProgressEvent<FileReader>) {
          console.log('READER loading');
          const img = new Image();
          img.src = e.target?.result as string;
          img.onload = async function () {
            const worker = await createWorker('eng', 1, {
              logger: ({ status, progress }) => {
                loaderSpinner.classList.add('loading');
                statusElement.classList.add('loading');
                statusElement.classList.remove('success');
                extractedText.value = '';
                if(status === 'recognizing text') {
                  statusElement.innerText = `${status} ${(progress*100).toFixed(2)}%`;
                } else {
                  statusElement.innerText = status;
                }
              },
            });
            const ret = await worker.recognize(img);
            loaderSpinner.classList.remove('loading');
            statusElement.classList.remove('loading');
            statusElement.classList.add('success');
            const {
              data: { text },
            } = ret;
            extractedText.value = text;
            statusElement.innerText = 'Text extracted successfully!';
            await worker.terminate();
          };
        };
        reader.readAsDataURL(file);
      }
    });
  }
}
customElements.define('ocr-component', OCRComponent);
</script>

<style>
  .upload-section {
    margin-bottom: 20px;
    text-align: center;
  }
  /* INPUT */
  /**********File Inputs**********/
.inputfile {
    width: 0.1px;
    height: 0.1px;
    opacity: 0;
    overflow: hidden;
    position: absolute;
    z-index: -1;
}
.inputfile + label {
    max-width: 80%;
    font-size: 1.25rem;
    font-weight: 700;
    text-overflow: ellipsis;
    white-space: nowrap;
    cursor: pointer;
    display: inline-block;
    overflow: hidden;
    padding: 0.625rem 1.25rem;
}

.inputfile + label svg {
    width: 1em;
    height: 1em;
    vertical-align: middle;
    fill: currentColor;
    margin-top: -0.25em;
    margin-right: 0.25em;
}
.iborrainputfile {
	font-size:16px; 
	font-weight:normal;
	font-family: 'Lato';
}

.inputfile-1 + label {
    color: #fff;
    background-color: #0090de;
}

.inputfile-1:focus + label,
.inputfile-1.has-focus + label,
.inputfile-1 + label:hover {
    background-color: #0090de;
}

  /* INPUT */
  #status {
    font-size: 1.5rem;
    margin-top: 10px;
    &::first-letter{
      text-transform: capitalize;
    }
    &.loading{
      color: #0090de;
    }
    &.success{
      color: #009032;
    }
  }
  .output-section {
    margin-top: 30px;
  }
  h2 {
    font-size: 20px;
    margin-bottom: 10px;
  }
  .text-output {
    display: block;
    border-radius: 5px;
    padding: 15px;
    font-size: 16px;
    border: 1px solid #ddd;
    min-height: 150px;
    width: 500px;
    overflow-y: auto;
  }
</style>
